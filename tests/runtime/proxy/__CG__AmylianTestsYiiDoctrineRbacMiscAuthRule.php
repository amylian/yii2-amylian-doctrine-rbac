<?php

namespace DoctrineProxies\__CG__\Amylian\Tests\Yii\Doctrine\Rbac\Misc;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class AuthRule extends \Amylian\Tests\Yii\Doctrine\Rbac\Misc\AuthRule implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * {@inheritDoc}
     * @param string $name
     */
    public function __get($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

        return parent::__get($name);
    }

    /**
     * {@inheritDoc}
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

        return parent::__set($name, $value);
    }

    /**
     * {@inheritDoc}
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

        return parent::__isset($name);

    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'name', 'createdAt', 'updatedAt', 'data', 'usedByAuthItems'];
        }

        return ['__isInitialized__', 'name', 'createdAt', 'updatedAt', 'data', 'usedByAuthItems'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (AuthRule $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function rules()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'rules', []);

        return parent::rules();
    }

    /**
     * {@inheritDoc}
     */
    public function scenarios()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'scenarios', []);

        return parent::scenarios();
    }

    /**
     * {@inheritDoc}
     */
    public function formName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'formName', []);

        return parent::formName();
    }

    /**
     * {@inheritDoc}
     */
    public function attributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attributes', []);

        return parent::attributes();
    }

    /**
     * {@inheritDoc}
     */
    public function attributeLabels()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attributeLabels', []);

        return parent::attributeLabels();
    }

    /**
     * {@inheritDoc}
     */
    public function attributeHints()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attributeHints', []);

        return parent::attributeHints();
    }

    /**
     * {@inheritDoc}
     */
    public function validate($attributeNames = NULL, $clearErrors = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'validate', [$attributeNames, $clearErrors]);

        return parent::validate($attributeNames, $clearErrors);
    }

    /**
     * {@inheritDoc}
     */
    public function beforeValidate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'beforeValidate', []);

        return parent::beforeValidate();
    }

    /**
     * {@inheritDoc}
     */
    public function afterValidate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'afterValidate', []);

        return parent::afterValidate();
    }

    /**
     * {@inheritDoc}
     */
    public function getValidators()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getValidators', []);

        return parent::getValidators();
    }

    /**
     * {@inheritDoc}
     */
    public function getActiveValidators($attribute = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getActiveValidators', [$attribute]);

        return parent::getActiveValidators($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function createValidators()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'createValidators', []);

        return parent::createValidators();
    }

    /**
     * {@inheritDoc}
     */
    public function isAttributeRequired($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttributeRequired', [$attribute]);

        return parent::isAttributeRequired($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function isAttributeSafe($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttributeSafe', [$attribute]);

        return parent::isAttributeSafe($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function isAttributeActive($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAttributeActive', [$attribute]);

        return parent::isAttributeActive($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeLabel($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeLabel', [$attribute]);

        return parent::getAttributeLabel($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributeHint($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributeHint', [$attribute]);

        return parent::getAttributeHint($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function hasErrors($attribute = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasErrors', [$attribute]);

        return parent::hasErrors($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getErrors($attribute = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrors', [$attribute]);

        return parent::getErrors($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstErrors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstErrors', []);

        return parent::getFirstErrors();
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstError($attribute)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstError', [$attribute]);

        return parent::getFirstError($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function getErrorSummary($showAllErrors)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getErrorSummary', [$showAllErrors]);

        return parent::getErrorSummary($showAllErrors);
    }

    /**
     * {@inheritDoc}
     */
    public function addError($attribute, $error = '')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addError', [$attribute, $error]);

        return parent::addError($attribute, $error);
    }

    /**
     * {@inheritDoc}
     */
    public function addErrors(array $items)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addErrors', [$items]);

        return parent::addErrors($items);
    }

    /**
     * {@inheritDoc}
     */
    public function clearErrors($attribute = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearErrors', [$attribute]);

        return parent::clearErrors($attribute);
    }

    /**
     * {@inheritDoc}
     */
    public function generateAttributeLabel($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'generateAttributeLabel', [$name]);

        return parent::generateAttributeLabel($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes($names = NULL, $except = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', [$names, $except]);

        return parent::getAttributes($names, $except);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttributes($values, $safeOnly = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttributes', [$values, $safeOnly]);

        return parent::setAttributes($values, $safeOnly);
    }

    /**
     * {@inheritDoc}
     */
    public function onUnsafeAttribute($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'onUnsafeAttribute', [$name, $value]);

        return parent::onUnsafeAttribute($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getScenario()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getScenario', []);

        return parent::getScenario();
    }

    /**
     * {@inheritDoc}
     */
    public function setScenario($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setScenario', [$value]);

        return parent::setScenario($value);
    }

    /**
     * {@inheritDoc}
     */
    public function safeAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'safeAttributes', []);

        return parent::safeAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function activeAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'activeAttributes', []);

        return parent::activeAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function load($data, $formName = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'load', [$data, $formName]);

        return parent::load($data, $formName);
    }

    /**
     * {@inheritDoc}
     */
    public function fields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'fields', []);

        return parent::fields();
    }

    /**
     * {@inheritDoc}
     */
    public function getIterator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIterator', []);

        return parent::getIterator();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$offset]);

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$offset]);

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($offset, $item)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$offset, $item]);

        return parent::offsetSet($offset, $item);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$offset]);

        return parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function __unset($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__unset', [$name]);

        return parent::__unset($name);
    }

    /**
     * {@inheritDoc}
     */
    public function __call($name, $params)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__call', [$name, $params]);

        return parent::__call($name, $params);
    }

    /**
     * {@inheritDoc}
     */
    public function hasProperty($name, $checkVars = true, $checkBehaviors = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasProperty', [$name, $checkVars, $checkBehaviors]);

        return parent::hasProperty($name, $checkVars, $checkBehaviors);
    }

    /**
     * {@inheritDoc}
     */
    public function canGetProperty($name, $checkVars = true, $checkBehaviors = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canGetProperty', [$name, $checkVars, $checkBehaviors]);

        return parent::canGetProperty($name, $checkVars, $checkBehaviors);
    }

    /**
     * {@inheritDoc}
     */
    public function canSetProperty($name, $checkVars = true, $checkBehaviors = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canSetProperty', [$name, $checkVars, $checkBehaviors]);

        return parent::canSetProperty($name, $checkVars, $checkBehaviors);
    }

    /**
     * {@inheritDoc}
     */
    public function hasMethod($name, $checkBehaviors = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasMethod', [$name, $checkBehaviors]);

        return parent::hasMethod($name, $checkBehaviors);
    }

    /**
     * {@inheritDoc}
     */
    public function behaviors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'behaviors', []);

        return parent::behaviors();
    }

    /**
     * {@inheritDoc}
     */
    public function hasEventHandlers($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasEventHandlers', [$name]);

        return parent::hasEventHandlers($name);
    }

    /**
     * {@inheritDoc}
     */
    public function on($name, $handler, $data = NULL, $append = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'on', [$name, $handler, $data, $append]);

        return parent::on($name, $handler, $data, $append);
    }

    /**
     * {@inheritDoc}
     */
    public function off($name, $handler = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'off', [$name, $handler]);

        return parent::off($name, $handler);
    }

    /**
     * {@inheritDoc}
     */
    public function trigger($name, \yii\base\Event $event = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'trigger', [$name, $event]);

        return parent::trigger($name, $event);
    }

    /**
     * {@inheritDoc}
     */
    public function getBehavior($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBehavior', [$name]);

        return parent::getBehavior($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getBehaviors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBehaviors', []);

        return parent::getBehaviors();
    }

    /**
     * {@inheritDoc}
     */
    public function attachBehavior($name, $behavior)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attachBehavior', [$name, $behavior]);

        return parent::attachBehavior($name, $behavior);
    }

    /**
     * {@inheritDoc}
     */
    public function attachBehaviors($behaviors)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attachBehaviors', [$behaviors]);

        return parent::attachBehaviors($behaviors);
    }

    /**
     * {@inheritDoc}
     */
    public function detachBehavior($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'detachBehavior', [$name]);

        return parent::detachBehavior($name);
    }

    /**
     * {@inheritDoc}
     */
    public function detachBehaviors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'detachBehaviors', []);

        return parent::detachBehaviors();
    }

    /**
     * {@inheritDoc}
     */
    public function ensureBehaviors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'ensureBehaviors', []);

        return parent::ensureBehaviors();
    }

    /**
     * {@inheritDoc}
     */
    public function init()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'init', []);

        return parent::init();
    }

    /**
     * {@inheritDoc}
     */
    public function extraFields()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'extraFields', []);

        return parent::extraFields();
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(array $fields = array (
), array $expand = array (
), $recursive = true)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', [$fields, $expand, $recursive]);

        return parent::toArray($fields, $expand, $recursive);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt(): ?\DateTime
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(?\DateTime $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$value]);

        return parent::setCreatedAt($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getRule(): \yii\rbac\Rule
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRule', []);

        return parent::getRule();
    }

    /**
     * {@inheritDoc}
     */
    public function setRule(\yii\rbac\Rule $rule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRule', [$rule]);

        return parent::setRule($rule);
    }

    /**
     * {@inheritDoc}
     */
    public function setName($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$value]);

        return parent::setName($value);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$value]);

        return parent::setUpdatedAt($value);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsedByAuthItems()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsedByAuthItems', []);

        return parent::getUsedByAuthItems();
    }

}
